#!/usr/bin/env python
# -*- coding: utf-8 -*-

# vision_landing
# https://github.com/fnoop/vision_landing
#
# This python script connects to arducopter using dronekit, to control precision landing.
# The control is purely visual using pose estimation from fiducial markers (eg. aruco or april tags), no additional rangefinder is needed.
# It launches a separate program track_targets which does the actual cv work and captures the resulting vectors from non-blocking thread handler.

from threading import Thread, Event
from Queue import Queue, Empty
from subprocess import Popen, PIPE
from dronekit import connect, VehicleMode, LocationGlobal, LocationGlobalRelative
from pymavlink import mavutil
from time import sleep, time
from datetime import datetime, timedelta
from sys import exit, stdout, stderr
from os import path, makedirs, symlink, remove
from math import pi
from re import sub, search
from datetime import datetime
import signal
import logging

### ================================
### Define Classes
### ================================

# Define threaded reader class
class ThreadedReader:
    def __init__(self, stdout, stderr):
        self.stdout = stdout
        self.stderr = stderr
        self.queue = Queue()
        self._stop = Event()
        def insertQueue(pipe, queue, qtype="stdout"):
            while not self.stopped():
                line = pipe.readline().rstrip()
                if line and qtype == "stdout":
                    queue.put(line)
                elif line and qtype == "stderr":
                    queue.put("error:"+line)
        self.threadout = Thread(target = insertQueue, args = (self.stdout, self.queue))
        self.threadout.daemon = True
        self.threadout.start()
        self.threaderr = Thread(target = insertQueue, args = (self.stderr, self.queue, "stderr"))
        self.threaderr.daemon = True
        self.threaderr.start()
    def readline(self, timeout = None):
        try:
            return self.queue.get(block = timeout is not None, timeout = timeout)
        except Empty:
            return None
    def clear(self):
        with self.queue.mutex:
            self.queue.queue.clear()
    def stop(self):
        self._stop.set()
    def stopped(self):
        return self._stop.isSet()

# Define tracking timer class
class TrackTimer:
    def __init__(self):
        self.fctimeus = None
        self.delta = None
        self.debug = False
    def update(self, timeus):
        if self.debug:
            print "Expected timeus: " +str(self.estimate()) +", actual timeus: " +str(timeus)
        # Messages come in or are processed asynchronously, out of order, so a later message may have an earlier timestamp.
        # So ignore any updates that are older than what we already know about
        if timeus > self.fctimeus:
            self.fctimeus = timeus
            self.mytimeus = datetime.now()
    def actual(self):
        return self.fctimeus
    def estimate(self):
        if self.fctimeus:
            self.delta = datetime.now() - self.mytimeus
            return int(self.fctimeus + (self.delta.total_seconds() * 1000))
        else:
            return None

# Define target tracking class
class TrackTargets:
    def __init__(self, args, calibration):
        self.state = None
        self.shutdown = False
        # Setup timing containers
        self.frame_times = []
        self.start_t = time()
        # Work out starting parameters
        self.setup(args, calibration)
        # Launch tracking process and process output
        log.info("Launching track_targets with arguments:" + " ".join(self.track_arguments))
        self.launch()
    def setup(self, args, calibration):
        # Define the basic arguments to track_targets
        self.track_arguments = [cwd+'/track_targets']
        # If marker dictionary is set, pass it through
        if args.markerdict:
            self.track_arguments.extend(['-d', args.markerdict])
        # If output is set, pass it through
        if args.output:
            now = datetime.now()
            nowtime = now.strftime("%Y-%m-%d-%H-%M-%S")
            args_output = sub("-xxx", "-"+str(nowtime), args.output)
            self.track_arguments.extend(['-o', args_output])
        # If marker id is set, pass it through
        if args.markerid:
            self.track_arguments.extend(['-i', args.markerid])
        # If width is set, pass it through
        if args.width:
            self.track_arguments.extend(['-w', args.width])
        # If height is set, pass it through
        if args.height:
            self.track_arguments.extend(['-g', args.height])
        # If fps is set, pass it through
        if args.fps:
            self.track_arguments.extend(['-f', args.fps])
        # If verbose is set, pass it through
        if args.verbose:
            self.track_arguments.extend(['-v'])
        # If brightness is set, pass it through
        if args.brightness:
            self.track_arguments.extend(['-b', args.brightness])
        # If fourcc codec is set, pass it through
        if args.fourcc:
            self.track_arguments.extend(['-c', args.fourcc])
        # If sizemapping is set, pass it through
        if args.sizemapping:
            self.track_arguments.extend(['-z', args.sizemapping])
        # If markerhistory is set, pass it through
        if args.markerhistory:
            self.track_arguments.extend(['--markerhistory', args.markerhistory])
        # If markerthreshold is set, pass it through
        if args.markerthreshold:
            self.track_arguments.extend(['--markerthreshold', args.markerthreshold])
        # If streamtype is set, pass it through
        if args.streamtype:
            self.track_arguments.extend(['--streamtype', args.streamtype])
        # If depthscale is set, pass it through
        if args.depthscale:
            self.track_arguments.extend(['--depthscale', args.depthscale])
        if args.camprofile:
            self.track_arguments.extend(['--camprofile', args.camprofile])
        # Add positional arguments
        self.track_arguments.extend([args.input, calibration, args.markersize])
    def launch(self):
        self.process = Popen(self.track_arguments, stdin = PIPE, stdout = PIPE, stderr = PIPE, shell = False, bufsize=1)
        self.reader = ThreadedReader(self.process.stdout, self.process.stderr)
    def processline(self, line):
        # Unpack data from track_targets data
        trackdata = line.rstrip().split(":")
        # If not target data, log and skip to next data
        if trackdata[0] != "target":
            datatype = trackdata[0]
            if trackdata[0] == "error":
                log.error("track_targets: " +str(trackdata[1:]))
            elif args.verbose:
                log.debug("track_targets: " + datatype[0].upper() + datatype[1:] + str(trackdata[1:]))
            return
        # Unpack and cast target data to correct types
        [id,x,y,z] = trackdata[1:]
        [id,x,y,z] = [int(id),float(x),float(y),float(z)]
        # If fake rangefinder distance is required, send it
        if args.fakerangefinder:
            craft.send_distance_message(int(z*100))
        # Send the landing_target message to arducopter
        craft.send_land_message(x,y,z)
        # Track frame timing to calculate fps, running average over last 5 frames
        end_t = time()
        time_taken = end_t - self.start_t
        self.start_t = end_t
        self.frame_times.append(time_taken)
        self.frame_times = self.frame_times[-5:]
        fps = len(self.frame_times) / sum(self.frame_times)
        log.info("Fctime:"+str(trackfctime.estimate())+", Fps: "+str(fps)+", Alt:"+ str(craft.vehicle.location.global_relative_frame.alt)+", Rangefinder:"+ str(craft.vehicle.rangefinder.distance)+ ", Marker:"+ str(id)+ ", Distance:"+str(z)+ "xOffset:"+str(x)+ "yOffset:"+str(y))
    def start(self):
        log.info("Requesting track_targets to start tracking:"+str(craft.vehicle.mode))
        self.state = "started"
        self.process.send_signal(signal.SIGUSR1)
        # self.process.stdin.write("BLAAAAAAH!\n") # This doesn't work yet
    def stop(self):
        log.info("Requesting track_targets to stop tracking:"+str(craft.vehicle.mode))
        self.state = "stopped"
        self.process.send_signal(signal.SIGUSR2)
    def end(self):
        log.info("Shutting down track_targets")
        # Stop threaded reader
        self.reader.stop()
        # track_targets should always be stopped by now, but be sure
        self.process.poll()
        if self.process.returncode == None:
            self.process.terminate()
        self.shutdown = True

# Define craft class
class Craft:
    def __init__(self, connectstr):
        self.debug = False
        self.mode = None
        self.connected = None
        self.vehicle = None
        self.connect(connectstr)
        self.precloiter_opt = self.find_precloiter_opt()
        if self.precloiter_opt:
            log.info("Precision loiter switch found: Channel "+str(self.precloiter_opt))
    def connect(self, connectstr):
        try:
            self.vehicle = connect(connectstr, wait_ready=True)
            self.connected = True
        except:
            self.connected = False
    # Define function to send distance_message mavlink message for mavlink based rangefinder, must be >10hz
    # http://mavlink.org/messages/common#DISTANCE_SENSOR
    def send_distance_message(self, dist):
        msg = self.vehicle.message_factory.distance_sensor_encode(
            0,          # time since system boot, not used
            1,          # min distance cm
            10000,      # max distance cm
            dist,       # current distance, must be int
            0,          # type = laser?
            0,          # onboard id, not used
            mavutil.mavlink.MAV_SENSOR_ROTATION_PITCH_270, # must be set to MAV_SENSOR_ROTATION_PITCH_270 for mavlink rangefinder, represents downward facing
            0           # covariance, not used
        )
        self.vehicle.send_mavlink(msg)
        self.vehicle.flush()
        if args.verbose:
            log.debug("Sending mavlink distance_message:" +str(dist))
    # Define function to send landing_target mavlink message for mavlink based precision landing
    # http://mavlink.org/messages/common#LANDING_TARGET
    def send_land_message(self, x,y,z):
        msg = self.vehicle.message_factory.landing_target_encode(
            0,          # time since system boot, not used
            0,          # target num, not used
            mavutil.mavlink.MAV_FRAME_BODY_NED, # frame, not used
            x,          # X-axis angular offset, in radians
            y,          # Y-axis angular offset, in radians
            z,          # distance, in meters
            0,          # Target x-axis size, in radians
            0           # Target y-axis size, in radians
        )
        self.vehicle.send_mavlink(msg)
        self.vehicle.flush()
        if args.verbose:
            log.debug("Sending mavlink landing_target:"+str(x)+" "+str(y)+" "+str(z))
    # Define function that arms and takes off, used for testing in SITL
    # Lifted from dronekit-python examples
    def arm_and_takeoff(self, targetAltitude):
        log.info("Basic pre-arm checks")
        # Don't let the user try to arm until autopilot is ready
        while not self.vehicle.is_armable:
            log.info(" Waiting for vehicle to initialise...")
            sleep(1)
        log.info("Arming motors")
        # Copter should arm in GUIDED mode
        self.vehicle.mode = VehicleMode("GUIDED")
        self.vehicle.armed = True
        while not self.vehicle.armed:      
            log.info(" Waiting for arming...")
            sleep(1)
        log.info("Taking off!")
        self.vehicle.simple_takeoff(targetAltitude) # Take off to target altitude
        # Wait until the vehicle reaches a safe height before processing the goto (otherwise the command 
        #  after Vehicle.simple_takeoff will execute immediately).
        while True:
            log.info(" Altitude: " + str(self.vehicle.location.global_relative_frame.alt))
            if self.vehicle.location.global_relative_frame.alt>=targetAltitude*0.95: #Trigger just below target alt.
                log.info("Reached target altitude")
                break
            sleep(1)
    # Scan through option channels for one set to 39 (precision loiter)
    def find_precloiter_opt(self):
        _optch = None
        for ch in range(7,16):
            try:
                if self.vehicle.parameters['CH'+str(ch)+'_OPT'] == 39:
                    _optch = ch
            except:
                pass
        return _optch

# Define class for signal tracking and handling
class SigTrack:
    def __init__(self):
        self.counter = 0
    def add(self):
        self.counter += 1
    def count(self):
        return self.counter
    def handle_sig(self, signal, frame):
        log.info("Signal handler called, calling shutdown and cleanup logic")
        track_targets.end()
        sigtracker.add()
        log.debug("Sigtracker count:"+str(sigtracker.count()))
        if sigtracker.count() >= 3:
            log.warning("Signal handler called three times, exiting immediately")
            exit(1)

### ================================
### End Define Classes
### ================================

### --------------------------------
### Parse arguments, setup logging
### --------------------------------

# Find full directory path of this script, used for loading config and other files
cwd = path.dirname(path.abspath(__file__))

# Find current time, used for dating files
now = datetime.now()
nowtime = now.strftime("%Y-%m-%d-%H-%M-%S")

# Configure argument parsing
import argparse
import ConfigParser
parser = argparse.ArgumentParser(description='Vision based precision landing')
parser.add_argument('--config', '-c', default=cwd+"/vision_landing.conf", help="config file location, defaults to same directory as vision_landing")
parser.add_argument('--connect', help="dronekit vehicle connection target string, eg. /dev/ttyS0, tcp:localhost:5770, udp:localhost:14560")
parser.add_argument('--markersize', help="Target marker size, in meters, required")
parser.add_argument('--sizemapping', '-z', help="Marker Size Mappings, in marker_id:size format, comma separated")
parser.add_argument('--markerhistory', help="Marker tracking history, in frames, defaults to 15")
parser.add_argument('--markerthreshold', help="Marker tracking threshold, in percentage, defaults to 50")
parser.add_argument('--calibration', help="camera calibration data, required")
parser.add_argument('--input', '-i', default="/dev/video0", help="camera input, defaults to /dev/video0")
parser.add_argument('--output', '-o', help="gstreamer output pipeline, defaults to none")
parser.add_argument('--markerdict', '-d', default="ARUCO_MIP_36h12", help="Target marker dictionary, defaults to ARUCO_MIP_36h12")
parser.add_argument('--markerid', '-id', help="Target ID (optional, if not specified will use closest target)")
parser.add_argument('--simulator', '-s', action='store_true', help="Perform initial simulator actions for testing, takeoff and initiate land")
parser.add_argument('--width', '-w', help="Video Input Resolution - Width")
parser.add_argument('--height', '-g', help="Video Input Resolution - Height")
parser.add_argument('--fps', '-f', help="Video Output FPS - Kludge factor")
parser.add_argument('--verbose', '-v', action='store_true', help="Verbose/Debug output")
parser.add_argument('--brightness', '-b', help="Camera Brightness/Gain")
parser.add_argument('--fourcc', '-u', help="Specify FourCC codec")
parser.add_argument('--fakerangefinder', '-r', action='store_true', help="Fake RangeFinder Data")
parser.add_argument('--logdir', '-l', help="Log directory, if not specified will log to stdout")
parser.add_argument('--controlprocessing', '-p', action='store_true', help="Control Vision Processing - enable/disable based on arming status and landing/precloiter mode")
parser.add_argument('--streamtype', default="colour", help="Intel RealSense stream type - colour or infrared")
parser.add_argument('--depthscale', help="RealSense Depth Scale in micrometers")
parser.add_argument('--camprofile', help="RealSense camera settings profile - indoors or outoors")
args = parser.parse_args()
# First parse config file, and set defaults
defaults = {}
if path.isfile(args.config):
    config = ConfigParser.SafeConfigParser()
    config.read([args.config])
    defaults.update(dict(config.items("Defaults")))
    parser.set_defaults(**defaults)
    args = parser.parse_args()
else:
    print
    print "Error: Config file "+str(args.config)+" does not exist"
    print
    exit(1)
    
# If we don't have the mandatory arguments, exit
if not args.calibration or not args.markersize or not args.connect:
    print
    if not args.calibration:
        print "Error: missing required argument 'calibration'"
    if not args.markersize:
        print "Error: missing required argument 'markersize'"
    if not args.connect:
        print "Error: missing required argument 'connect'"
    print
    parser.print_usage()
    exit(1)

# Setup logging
console = logging.StreamHandler()
if args.logdir:
    # If logdir specified, create if it doesn't exist
    if not path.exists(args.logdir):
        makedirs(args.logdir)
    # Add timestamped logfile out
    logging.basicConfig(filename=args.logdir+'/vision_landing.'+nowtime+'.log', format='%(asctime)s %(levelname)s %(message)s', level=logging.DEBUG)
    # Create handly symlink to current logfile
    if path.exists(args.logdir+'/last.log'):
        remove(args.logdir+'/last.log')
    symlink(args.logdir+'/vision_landing.'+nowtime+'.log', args.logdir+'/last.log')
else:
    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=logging.DEBUG)
log = logging.getLogger(__name__)

# Check if calibration data exists
if path.isfile(cwd+"/calibration/"+args.calibration):
    calibration = cwd+"/calibration/"+args.calibration
elif path.isfile(args.calibration):
    calibration = args.calibration
else:
    log.critical("Error: specified calibration does not exist.")
    exit(1)

### --------------------------------
### Start track_targets CV process
###  and attach threaded reader
### --------------------------------

# Check track_targets exists
if not path.isfile(cwd+"/track_targets"):
    log.critical("Error: track_targets does not exist.  Please run 'cmake . && make' in src/ directory")
    exit(1)

# Run the vision tracker as a thread
try:
    track_targets = TrackTargets(args, calibration)
except Exception as error:
    log.critical("Error starting track_targets:"+ str(error))
    exit(1)
track_targets.process.poll()
if track_targets.process.returncode != None:
    log.critical("Error starting track_targets")
    exit(1)

# Define a function that stops and clears up cv process
def cleanup():
    # Do a final check to see if tracker process still running, try to shut down if so
    track_targets.process.poll()
    if track_targets.process.returncode == None:
        track_targets.end()
    # Close connection to the drone
    try:
        craft.vehicle.close()
    except:
        pass

### --------------------------------
### Start up procedure - setup signal handlers,
###  connect to drone, start syncing time with drone,
###  setup drone parameters
### --------------------------------

# Setup signal handlers
sigtracker = SigTrack()
signal.signal(signal.SIGINT, sigtracker.handle_sig)
signal.signal(signal.SIGTERM, sigtracker.handle_sig)

# Connect to the Vehicle
log.info("Connecting to drone on: %s" % args.connect)
craft = Craft(args.connect)
if not craft.connected:
    log.critical("Error: Could not connect to drone")
    cleanup()
    exit(1)
else:
    log.info("Connected to drone")

# Create a new tracktimer object to try and keep sync with the flight controller
trackfctime = TrackTimer()
# Setup a listener for all incoming mavlink messages and update our time tracker whenever possible
@craft.vehicle.on_message("*")
def listener_all(self, name, message):
    try:
        trackfctime.update(message.time_usec)
    except:
        pass
    try:
        trackfctime.update(message.time_boot_ms * 1000)
    except:
        pass

# Set some parameters important to precision landing
log.info("Setting flight controller parameters")
craft.vehicle.parameters['PLND_ENABLED'] = 1 
craft.vehicle.parameters['PLND_TYPE'] = 1 # Mavlink landing mode
#if 'PLND_EST_TYPE' in craft.vehicle.parameters:
    # craft.vehicle.parameters['PLND_EST_TYPE'] = 0 # https://github.com/ArduPilot/ardupilot/pull/5491, not yet in arducopter

if args.fakerangefinder:
    # Following are for mavlink based rangefinder (not needed for 3.5-rc2+)
    craft.vehicle.parameters['RNGFND_TYPE'] = 10
    craft.vehicle.parameters['RNGFND_MIN_CM'] = 1
    craft.vehicle.parameters['RNGFND_MAX_CM'] = 10000
    craft.vehicle.parameters['RNGFND_GNDCLEAR'] = 5
    log.info("Faking RangeFinder data with distance_sensor messages")

# If simulator option set, perform initial takeoff and initiate land
if args.simulator:
    if args.fakerangefinder:
        # Following are for SITL rangefinder
        craft.vehicle.parameters['RNGFND_TYPE'] = 1 
        craft.vehicle.parameters['RNGFND_MIN_CM'] = 0
        craft.vehicle.parameters['RNGFND_MAX_CM'] = 4000
        craft.vehicle.parameters['RNGFND_PIN'] = 0
        craft.vehicle.parameters['RNGFND_SCALING'] = 12.12
    # Take off to 25m altitude and start landing if not already armed
    if not craft.vehicle.armed:
        craft.arm_and_takeoff(25)
        # Start landing
        log.info("Starting landing...")
        craft.vehicle.mode = VehicleMode("LAND")

# Clear the vision tracking queue, we don't want to blast mavlink messages for everything stacked up
while True:
    line = track_targets.reader.readline()
    if not line:
        break
    elif not search("^target:", line):
        if search("^error:", line):
            log.error("track_targets: "+sub("^error:","",line))
        else:
            log.info("track_targets: "+line)

### --------------------------------
### Main Loop
### Monitor for landing/precloiter mode
### Listen for incoming cv tracking results
### --------------------------------
log.info("Entering main tracking loop")
while True:
    # If craft mode has changed, take action
    if (args.controlprocessing and (craft.vehicle.armed and (craft.vehicle.mode == "LAND" or (craft.vehicle.mode == "LOITER" and (craft.precloiter_opt and craft.vehicle.channels[str(craft.precloiter_opt)] > 1800))))) and track_targets.state != "started":
        track_targets.start()
    elif (args.controlprocessing and (not craft.vehicle.armed or (craft.vehicle.mode != "LAND" and (craft.vehicle.mode != "LOITER" and (craft.precloiter_opt and craft.vehicle.channels[str(craft.precloiter_opt)] <= 1800))))) and track_targets.state == "started":
        track_targets.stop()
    elif not args.controlprocessing and not track_targets.state:
        track_targets.start()

    line = track_targets.reader.readline() # See if there are any tracking results in the queue
    if line:
        track_targets.processline(line)
    else:
        # Add a short 10ms sleep to slow down the loop, otherwise it consumes 100% cpu.
        sleep(0.01)

    if args.simulator and not craft.vehicle.armed and not track_targets.shutdown:
        log.info("Landed")
        track_targets.end()

    track_targets.process.poll() # Poll the track_targets process and populate returncode, exit main loop when track_targets shut down
    if track_targets.process.returncode != None and track_targets.shutdown:
        log.info("Tracking process return code:"+str(track_targets.process.returncode)+", exiting main loop")
        break
    elif track_targets.process.returncode != None and not track_targets.shutdown:
        log.error("Error: Tracking process shut down unexpectedly ("+str(track_targets.process.returncode)+"), restarting")
        track_targets = TrackTargets(args, calibration)
        sleep(1)
        track_targets.process.poll()

cleanup()
log.info("Vision_landing shutdown complete, exiting")
exit(track_targets.process.returncode)
